from PySide2.QtWidgets import QWidget, QGridLayout, QApplication, QFileDialog
from PySide2.QtWebEngineWidgets import QWebEngineView
from PySide2.QtCore import QUrl, Signal
import sys
import os
import PlotControleEngine

class PlotViewer(QWidget):
    feedPlotControls = Signal(str)
    def __init__(self):
        super().__init__()
        self.webView = QWebEngineView()
        layout = QGridLayout()
        layout.addWidget(self.webView, 0, 0)
        self.setLayout(layout)
        self.json_data = ''
        self.plot_type = 'Regressão'
        self.webView.page().profile().downloadRequested.connect(self.download_handler)


    def loadPlot(self, _url, _json=None, _type='Regressão'):
        assert(isinstance(_json, str))
        #takes html local address to plot generated by plotly
        if _json is not None:
            self.json_data = _json
            self.feedPlotControls.emit(self.json_data)
            self.plot_type = _type
        url = QUrl.fromLocalFile(os.path.abspath(_url))
        self.webView.load(url)

    def erasePlot(self):
        self.json_data = ''
        pcengine = PlotControleEngine.PlotControlEngine(self.json_data)
        _url, self.json_data = pcengine.render()
        url = QUrl.fromLocalFile((os.path.abspath(_url)))
        self.webView.load(url)

    def download_handler(self, item):
        file_path = QFileDialog().getSaveFileName(self, "Salvar Plot", filter="PNG (*.png);;")
        item.setPath(file_path[0])
        item.accept()

def test():
    app = QApplication(sys.argv)
    g = PlotViewer()
    g.loadPlot(r'iframe_figures\figure_0.html')
    g.show()
    sys.exit(app.exec_())